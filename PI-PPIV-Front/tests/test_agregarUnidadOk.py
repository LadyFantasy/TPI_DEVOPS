# Generated by Selenium IDE
import unittest
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.chrome.options import Options

class TestAgregarUnidadOk(unittest.TestCase):
    def setUp(self):
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        self.driver = webdriver.Chrome(options=chrome_options)
        self.driver.implicitly_wait(10)

    def tearDown(self):
        self.driver.quit()

    def test_agregarUnidadOk(self):
        self.driver.get("https://tpi-devops-git-main-ladyfantasys-projects.vercel.app/login")
        self.driver.set_window_size(1181, 800)
        self.driver.find_element(By.CSS_SELECTOR, ".login-input-top").click()
        self.driver.find_element(By.CSS_SELECTOR, ".login-input-top").send_keys("germangp62@gmail.com")
        self.driver.find_element(By.CSS_SELECTOR, ".login-input-bottom").click()
        self.driver.find_element(By.CSS_SELECTOR, ".login-input-bottom").send_keys("1234")
        self.driver.find_element(By.CSS_SELECTOR, ".button1").click()

        # Esperar a que cargue el AdminPanel y hacer click en "Administrar unidades"
        WebDriverWait(self.driver, 10).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, ".admincard:nth-child(1) > .admincard__title"))
        ).click()

        # Esperar a que cargue la página Units y hacer click en "Agregar unidad"
        WebDriverWait(self.driver, 10).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, ".button1"))
        ).click()

        # Esperar a que cargue la página AddUnit y el campo title esté presente
        WebDriverWait(self.driver, 10).until(
            EC.presence_of_element_located((By.NAME, "title"))
        )

        # Llenar formulario completo con los campos que realmente existen
        self.driver.find_element(By.NAME, "title").click()
        self.driver.find_element(By.NAME, "title").send_keys("pruebaUnidad")
        self.driver.find_element(By.NAME, "description").click()
        self.driver.find_element(By.NAME, "description").send_keys("test de agregado")
        self.driver.find_element(By.NAME, "address").click()
        self.driver.find_element(By.NAME, "address").send_keys("test address")
        self.driver.find_element(By.NAME, "price").click()
        self.driver.find_element(By.NAME, "price").send_keys("1000")
        
        # Configurar los dropdowns
        self.driver.find_element(By.NAME, "rooms").click()
        dropdown = self.driver.find_element(By.NAME, "rooms")
        dropdown.find_element(By.XPATH, "//option[. = '3']").click()

        self.driver.find_element(By.NAME, "beds").click()
        dropdown = self.driver.find_element(By.NAME, "beds")
        dropdown.find_element(By.XPATH, "//option[. = '6']").click()

        self.driver.find_element(By.NAME, "bathrooms").click()
        dropdown = self.driver.find_element(By.NAME, "bathrooms")
        dropdown.find_element(By.XPATH, "//option[. = '3']").click()

        # Guardar la unidad
        button = WebDriverWait(self.driver, 10).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, ".unit-detail__buttons > .button1"))
        )
        self.driver.execute_script("arguments[0].scrollIntoView(true);", button)
        self.driver.execute_script("arguments[0].click();", button)

        # Verificar que se redirija a la página de unidades o se muestre un mensaje de éxito
        try:
            # Esperar a que se redirija a la página de unidades
            WebDriverWait(self.driver, 10).until(
                lambda driver: "units" in driver.current_url
            )
            self.assertTrue(True, "Se redirigió correctamente a la página de unidades")
        except:
            # Si no se redirige, verificar que se muestre un mensaje de éxito
            try:
                WebDriverWait(self.driver, 5).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, ".success-message, .alert-success"))
                )
                self.assertTrue(True, "Se mostró un mensaje de éxito")
            except:
                # Como último recurso, verificar que el formulario se haya limpiado
                title_field = self.driver.find_element(By.NAME, "title")
                self.assertEqual(title_field.get_attribute("value"), "", "El formulario debería haberse limpiado")
  
