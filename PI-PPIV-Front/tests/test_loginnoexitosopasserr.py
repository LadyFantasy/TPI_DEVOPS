# Generated by Selenium IDE
import unittest
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options

class TestLoginnoexitosopasserr(unittest.TestCase):
    def setUp(self):
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        self.driver = webdriver.Chrome(options=chrome_options)
        self.driver.implicitly_wait(10)

    def tearDown(self):
        self.driver.quit()

    def test_loginnoexitosopasserr(self):
        self.driver.get("https://proyecto-ppiv-front.vercel.app/login")
        self.driver.set_window_size(1181, 797)
        
        # Intentar login con contraseña incorrecta
        self.driver.find_element(By.CSS_SELECTOR, ".login-input-top").click()
        self.driver.find_element(By.CSS_SELECTOR, ".login-input-top").send_keys("germangp62@gmail.com")
        
        self.driver.find_element(By.CSS_SELECTOR, ".login-input-bottom").click()
        self.driver.find_element(By.CSS_SELECTOR, ".login-input-bottom").send_keys("password_incorrecta")
        
        self.driver.find_element(By.CSS_SELECTOR, ".button1").click()
        
        # Verificar que se muestre un mensaje de error
        try:
            # Esperar a que aparezca un mensaje de error
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, ".error-message, .alert, [role='alert']"))
            )
            self.assertTrue(True, "Se mostró un mensaje de error como se esperaba")
        except:
            # Si no hay mensaje de error específico, verificar que seguimos en la página de login
            current_url = self.driver.current_url
            self.assertIn("login", current_url, "Debería permanecer en la página de login")
            
            # También verificar que los campos de login siguen presentes
            self.assertTrue(
                self.driver.find_element(By.CSS_SELECTOR, ".login-input-top").is_displayed(),
                "El campo de email debería seguir visible"
            )
            self.assertTrue(
                self.driver.find_element(By.CSS_SELECTOR, ".login-input-bottom").is_displayed(),
                "El campo de contraseña debería seguir visible"
            )
  
